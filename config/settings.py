"""
Django settings for milestone2 project.

Generated by 'django-admin startproject' using Django 4.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

import os
import mongoengine
from pathlib import Path
from decouple import config
from drf_util import elastic
from django.utils.translation import gettext_lazy as _

import apps.tasks.tests_runners

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

FIXTURE_DIRS = ("fixtures/",)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-kc(*$=#9iv=5ux7vts5if_dszkhu+%9_*z@_7s*w0r#r@u878%'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # Third party apps
    "rest_framework",
    "rest_framework.authtoken",
    "rest_framework_mongoengine",
    "corsheaders",
    "drf_yasg",
    'huey.contrib.djhuey',
    'fixtures_mongoengine',
    # Local apps
    'apps.common',
    'apps.users',
    'apps.tasks',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # Third party middleware
    "corsheaders.middleware.CorsMiddleware",
    # Local middleware
    "apps.common.middlewares.ApiMiddleware",
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'

CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_HEADERS = (
    "accept",
    "accept-encoding",
    "authorization",
    "content-type",
    "dnt",
    "origin",
    "user-agent",
    "x-csrftoken",
    "x-requested-with",
    "token",
    "cache-control",
)

REST_FRAMEWORK = {
    "DATETIME_FORMAT": "%Y-%m-%dT%H:%M:%SZ",
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
    "DEFAULT_PERMISSION_CLASSES": ("rest_framework.permissions.IsAuthenticated",),
    "DEFAULT_RENDERER_CLASSES": ("rest_framework.renderers.JSONRenderer",),
    "EXCEPTION_HANDLER": "apps.common.exceptions.custom_exception_handler",
    'TEST_REQUEST_DEFAULT_FORMAT': 'json'
}

SWAGGER_SETTINGS = {
    "SECURITY_DEFINITIONS": {
        "Bearer": {"type": "apiKey", "name": "Authorization", "in": "header"}
    }
}

# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases


POSTGRES_NAME = os.environ.get('POSTGRES_NAME', config('POSTGRES_NAME'))
POSTGRES_USER = os.environ.get('POSTGRES_USER', config('POSTGRES_USER'))
POSTGRES_PASSWORD = os.environ.get('POSTGRES_PASSWORD', config('POSTGRES_PASSWORD'))
POSTGRES_HOST = os.environ.get('db', config('POSTGRES_HOST'))
POSTGRES_PORT = os.environ.get('POSTGRES_PORT', config('POSTGRES_PORT'))

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': POSTGRES_NAME,
        'USER': POSTGRES_USER,
        'PASSWORD': POSTGRES_PASSWORD,
        'HOST': POSTGRES_HOST,
        'PORT': POSTGRES_PORT,
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en'

LANGUAGES = (
    ('en', _('English')),
    ('ro', _('Romanian')),
)

COUNTRIES_LANGS = ['en', 'ro', 'de', 'pl', 'pt', 'ru']

LOCALE_PATHS = (
    os.path.join(BASE_DIR, 'locale'),
)

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = 'static/'

MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media")

DATE_FORMAT = "%Y-%m-%d %H:%m"

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

WSGI_AUTO_RELOAD = True

DEBUG_LEVEL = "INFO"

LOGGING = {
    "version": 1,
    "disable_existing_loggers": True,
    "formatters": {"standard": {"format": "%(asctime)s [%(levelname)s]- %(message)s"}},
    "handlers": {
        "console": {
            "level": DEBUG_LEVEL,
            "class": "logging.StreamHandler",
            "formatter": "standard",
        }
    },
    "loggers": {
        "info": {"handlers": ["console"], "level": DEBUG_LEVEL, "propagate": True},
        "django": {
            "handlers": ["console"],
            "level": DEBUG_LEVEL,
            "propagate": True,
        },
        "django.request": {
            "handlers": ["console"],
            "level": DEBUG_LEVEL,
            "propagate": True,
        },
    },
}

DEFAULT_FROM_EMAIL = config('DEFAULT_FROM_EMAIL')
SERVER_EMAIL = config('SERVER_EMAIL')
EMAIL_USE_TLS = config('EMAIL_USE_TLS')
EMAIL_HOST = config('EMAIL_HOST')
EMAIL_PORT = config('EMAIL_PORT')
EMAIL_HOST_USER = config('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD')

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'

REDIS_HOST = os.environ.get('REDIS_HOST', config('REDIS_HOST'))
REDIS_PORT = os.environ.get('REDIS_PORT', config('REDIS_PORT'))

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": f"redis://{REDIS_HOST}:{REDIS_PORT}/0",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    }
}

CACHE_TTL = 60 * 1

SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_CACHE_ALIAS = "default"

HUEY = {
    'huey_class': 'huey.PriorityRedisHuey',  # Huey's implementation to use.
    'name': DATABASES['default']['NAME'],  # Use db name for huey.
    'results': True,  # Store return values of tasks.
    'store_none': False,  # If a task returns None, do not save to results.
    'immediate': DEBUG,  # If DEBUG=True, run synchronously.
    'utc': True,  # Use UTC for all times internally.
    'blocking': True,  # Perform blocking pop rather than poll Redis.
    'connection': {
        'host': REDIS_HOST,
        'port': REDIS_PORT,
        'db': 0,
        'connection_pool': None,  # Definitely you should use pooling!
        # ... tons of other options, see redis-py for details.

        # huey-specific connection parameters.
        'read_timeout': 1,  # If not polling (blocking pop), use timeout.
        'url': None,  # Allow Redis config via a DSN.
    },
    'consumer': {
        'workers': 1,
        'worker_type': 'thread',
        'initial_delay': 0.1,  # Smallest polling interval, same as -d.
        'backoff': 1.15,  # Exponential backoff using this rate, -b.
        'max_delay': 10.0,  # Max possible polling interval, -m.
        'scheduler_interval': 1,  # Check schedule every second, -s.
        'periodic': True,  # Enable crontab feature.
        'check_worker_health': True,  # Enable worker health checks.
        'health_check_interval': 1,  # Check worker health every second.
    },
}

MONGO_USERNAME = os.environ.get('MONGO_USERNAME', config('MONGO_USERNAME'))
MONGO_PASSWORD = os.environ.get('MONGO_PASSWORD', config('MONGO_PASSWORD'))
MONGO_HOST = os.environ.get('MONGO_HOST', config('MONGO_HOST'))
MONGO_PORT = os.environ.get('MONGO_PORT', config('MONGO_PORT'))

MONGO_NAME = 'milestones'
MONGO_DATABASE_HOST = f'mongodb://{MONGO_USERNAME}:{MONGO_PASSWORD}@{MONGO_HOST}:{MONGO_PORT}/{MONGO_NAME}?authSource=admin&retryWrites=true&w=majority'
MONGO_TEST_NAME = 'test'
MONGO_TEST_DATABASE_HOST = f'mongodb://{MONGO_USERNAME}:{MONGO_PASSWORD}@{MONGO_HOST}:{MONGO_PORT}/{MONGO_TEST_NAME}?authSource=admin&retryWrites=true&w=majority'

mongoengine.connect(db=MONGO_NAME, host=MONGO_DATABASE_HOST)

TEST_RUNNER = 'apps.tasks.tests_runners.CustomTestRunner'

ELASTIC_HOST = os.environ.get('ELASTICSEARCH_HOSTS', f'{config("ELASTIC_HOST")}:{config("ELASTIC_PORT")}')
ELASTIC_INDEX_PREFIX = 'milestones'
ELASTIC_TEST_INDEX_PREFIX = 'test'
